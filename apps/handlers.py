from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import apps.keyboards as kb
from apps.functions import win, win
from apps.functions import win_phrase, check_phrase
from base.lite_translate import translate
from base.phrase_translate import ph_translate
import random

router = Router()
word = {}
num = {}


class Translate(StatesGroup):
    us = State()
    us_phrase = State()


@router.message(CommandStart())
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.first_name}!"
        f"\n–≠—Ç–æ –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –†–∞—Å–ª!"
        f"\n–Ø –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!"
        f"\n\n–ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚¨áÔ∏è",
        reply_markup=kb.main,
    )


@router.message(F.text == "–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥üá∫üá∏")
async def us(message: Message, state: FSMContext):
    num[message.from_user.id] = 0
    await state.set_state(Translate.us)
    index = random.randint(0, (len(translate) - 1))  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    word[message.from_user.id] = translate[index]  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
    text_word = word.get(message.from_user.id)  # –¥–æ—Å—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    await message.answer(
        f"–í—ã–ø–∞–ª–æ —Å–ª–æ–≤–æ: <b>{text_word[0]}</b>.\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:",
        reply_markup=kb.translate_cancel("lite"),
    )


@router.message(F.text == "–ü–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑ü¶ú")
async def phrase_translate(message: Message, state: FSMContext):
    num[message.from_user.id] = 0
    await state.set_state(Translate.us_phrase)
    index = random.randint(0, (len(ph_translate) - 1))  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    word[message.from_user.id] = ph_translate[index]  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑—ã
    text_word = word.get(message.from_user.id)  # –¥–æ—Å—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    await message.answer(
        f"–í—ã–ø–∞–ª–∞ —Ñ—Ä–∞–∑–∞: <b>{text_word[0]}</b>.\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:",
        reply_markup=kb.translate_cancel("phrase"),
    )


@router.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ÑπÔ∏è")
async def information(message: Message):
    await message.answer(
        "–ë–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ—Ä–∞–∑ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n"
        "–†–∞—Å–ª: —Ç–≤–æ–π —É—á–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!ü§ñ",
        disable_web_page_preview=True,
    )


@router.message(Translate.us)
async def repeat(message: Message, state: FSMContext):
    text_user = message.text.lower()  # –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    text_word = word.get(message.from_user.id)
    num[message.from_user.id] += 1
    num_user = num.get(message.from_user.id, 0)
    if text_user in text_word:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ —Ç–æ –≤—ã–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–π–≥—Ä—ã—à–∞
        text = await win(message.from_user.id, state)
        await message.answer(text, reply_markup=kb.repeat_keyboard("lite"))
    elif num_user == 3:  # –µ—Å–ª–∏ –Ω–µ —É–≥–∞–¥—ã–≤–∞–µ—Ç —Ç–æ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–∏–≥—Ä—ã—à–∞
        text = await win(message.from_user.id, state, win=False)
        await message.answer(text, reply_markup=kb.repeat_keyboard("lite"))
    else:  # –µ—Å–ª–∏ –Ω–µ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è —Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–µ–≤–µ—Ä–Ω–æ
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=kb.translate_cancel("lite")
        )


@router.message(Translate.us_phrase)
async def phrase_con(message: Message, state: FSMContext):
    text_user = message.text.capitalize()
    num[message.from_user.id] += 1
    num_user = num.get(message.from_user.id, 0)
    win = await check_phrase(message, text_user)
    if win:
        text = await win_phrase(message.from_user.id, state)
        await message.answer(text, reply_markup=kb.repeat_keyboard("phrase"))
    elif num_user == 3:
        text = await win_phrase(message.from_user.id, state, win=False)
        await message.answer(text, reply_markup=kb.repeat_keyboard("phrase"))
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=kb.translate_cancel("phrase")
        )
